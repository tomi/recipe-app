#r "paket: groupref build //"
#load "./.fake/build.fsx/intellisense.fsx"

#r @"/Users/totu/.nuget/packages/fake.fluentmigrator/5.16.0/tools/Fake.FluentMigrator.dll"

// #r "FAKE.FluentMigrator"
// #r "./packages/FAKE.FluentMigrator/tools/FluentMigrator.Runner.dll"
// #r "Npgsql"

#if !FAKE
    #r "netstandard"
    #r "Facades/netstandard" // https://github.com/ionide/ionide-vscode-fsharp/issues/839#issuecomment-396296095
#endif

open System

open Fake.Core
open Fake.DotNet
open Fake.IO

open Npgsql
open Dapper
open FSharp.Control

Target.initEnvironment ()

let serverPath = Path.getFullName "./src/Server"
let clientPath = Path.getFullName "./src/Client"
let clientDeployPath = Path.combine clientPath "deploy"
let deployDir = Path.getFullName "./deploy"

let release = ReleaseNotes.load "RELEASE_NOTES.md"

let platformTool tool winTool =
    let tool = if Environment.isUnix then tool else winTool
    match ProcessUtils.tryFindFileOnPath tool with
    | Some t -> t
    | _ ->
        let errorMsg =
            tool + " was not found in path. " +
            "Please install it and make sure it's available from your path. " +
            "See https://safe-stack.github.io/docs/quickstart/#install-pre-requisites for more info"
        failwith errorMsg

let nodeTool = platformTool "node" "node.exe"
let npmTool = platformTool "npm" "npm.cmd"
let npxTool = platformTool "npx" "npx.cmd"

let runTool cmd args workingDir =
    let arguments = args |> String.split ' ' |> Arguments.OfArgs
    Command.RawCommand (cmd, arguments)
    |> CreateProcess.fromCommand
    |> CreateProcess.withWorkingDirectory workingDir
    |> CreateProcess.ensureExitCode
    |> Proc.run
    |> ignore

let runDotNet cmd workingDir =
    let result =
        DotNet.exec (DotNet.Options.withWorkingDirectory workingDir) cmd ""
    if result.ExitCode <> 0 then failwithf "'dotnet %s' failed in %s" cmd workingDir

let openBrowser url =
    //https://github.com/dotnet/corefx/issues/10361
    Command.ShellCommand url
    |> CreateProcess.fromCommand
    |> CreateProcess.ensureExitCodeWithMessage "opening browser failed"
    |> Proc.run
    |> ignore

let queryExecutedScripts (conn: NpgsqlConnection) =
    async {
        let! migrations = conn.QueryAsync<string>("SELECT name FROM Migrations") |> Async.AwaitTask

        return Set.ofSeq migrations
    }

let createMigrationsIfNotExists (conn: NpgsqlConnection) =
    async {
        let! result = conn.ExecuteAsync("""
            CREATE TABLE IF NOT EXISTS Migrations (
                id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                name VARCHAR,
                script VARCHAR,
                date_created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP)""") |> Async.AwaitTask

        result |> ignore
    }

let loadScript (name: string) =
    let scriptPath = Path.combine (Path.combine Environment.CurrentDirectory "migrations") name
    let contents = System.IO.File.ReadLines(scriptPath)
    String.Join("\n", contents)

let runMigration (conn: NpgsqlConnection) (name: string) (script: string) =
    async {
        use tx = conn.BeginTransaction()

        let! result = conn.ExecuteAsync(script, null, tx) |> Async.AwaitTask

        let data = dict [
            "name", name
            "script", script
        ]

        let! result2 = conn.ExecuteAsync("INSERT INTO Migrations (name, script) VALUES (@name, @script)", data, tx) |> Async.AwaitTask

        do! tx.CommitAsync() |> Async.AwaitTask
    }

let readExistingScripts () =
    System.IO.Directory.GetFiles(Path.combine Environment.CurrentDirectory "migrations", "*.sql")
    |> Seq.map System.IO.Path.GetFileName
    |> Seq.sort

let runMigrations =
    async {
        use conn = new NpgsqlConnection("Server=127.0.0.1;Port=5445;Database=recipedb;User Id=recipeapp;
Password=recipeapp;")
        conn.Open()

        do! createMigrationsIfNotExists conn
        let! executedScripts = queryExecutedScripts conn
        let existing = readExistingScripts ()

        let notExecuted = existing |> Seq.filter (fun s -> executedScripts.Contains(s) = false)

        for scriptName in notExecuted do
            do! runMigration conn scriptName (loadScript scriptName)

        printfn "Executed scripts %s" (String.Join(",", executedScripts))
        printfn "NOT executed scripts %s" (String.Join(",", notExecuted))
        printfn "Existing scripts %s" (String.Join(",", existing))
    }

Target.create "Clean" (fun _ ->
    [ deployDir
      clientDeployPath ]
    |> Shell.cleanDirs
)

Target.create "InstallClient" (fun _ ->
    printfn "Node version:"
    runTool nodeTool "--version" __SOURCE_DIRECTORY__
    printfn "Npm version:"
    runTool npmTool "--version"  __SOURCE_DIRECTORY__
    runTool npmTool "install" __SOURCE_DIRECTORY__
)

Target.create "Build" (fun _ ->
    runDotNet "build" serverPath
    Shell.regexReplaceInFileWithEncoding
        "let app = \".+\""
       ("let app = \"" + release.NugetVersion + "\"")
        System.Text.Encoding.UTF8
        (Path.combine clientPath "Version.fs")
    runTool npxTool "webpack-cli -p" __SOURCE_DIRECTORY__
)

Target.create "Run" (fun _ ->
    let server = async {
        runDotNet "watch run" serverPath
    }
    let client = async {
        runTool npxTool "webpack-dev-server" __SOURCE_DIRECTORY__
    }
    let browser = async {
        do! Async.Sleep 5000
        openBrowser "http://localhost:8080"
    }

    let vsCodeSession = Environment.hasEnvironVar "vsCodeSession"
    let safeClientOnly = Environment.hasEnvironVar "safeClientOnly"

    let tasks =
        [ if not safeClientOnly then yield server
          yield client
          if not vsCodeSession then yield browser ]

    tasks
    |> Async.Parallel
    |> Async.RunSynchronously
    |> ignore
)

Target.create "Migrate" (fun _ ->
    runMigrations
    |> Async.RunSynchronously
    |> ignore
)






open Fake.Core.TargetOperators

"Clean"
    ==> "InstallClient"
    ==> "Build"


"Clean"
    ==> "InstallClient"
    ==> "Run"

Target.runOrDefaultWithArguments "Build"
